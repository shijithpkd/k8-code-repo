pipeline {
    agent any

    environment {
        // Define environment variables
        SONARQUBE_SCANNER_HOME = tool(name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation')
        SONARQUBE_URL = 'http://34.28.223.41:9000/'  // SonarQube URL
        DOCKER_REGISTRY = 'docker.io'  // Docker registry URL
       // DOCKER_IMAGE_NAME = 'my-nginx-image'  // Replace with your Docker image name
        IMAGE_TAG = "${env.BUILD_NUMBER}"  // Using Jenkins build number as the image tag
        HELM_RELEASE_NAME = 'nginx-release'  // Helm release name
        HELM_CHART_PATH = './nginx-chat'  // Path to your Helm chart
        KUBE_NAMESPACE = 'nginx'  // Kubernetes namespace for deployment
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout your source code from SCM
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Wrap the SonarQube analysis within the SonarQube environment.
                withSonarQubeEnv('SonarQube') {  // 'SonarQube' is the name of your SonarQube server in Jenkins
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONARQUBE_TOKEN')]) {
                        // Execute SonarQube Scanner
                        sh """
                            ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=my-flask-app \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the specified tag
                    sh "docker build -t ${DDOCKER_NGINX_IMAG}:${IMAGE_TAG} Docker-files/."
                    
                    // Tag the image for the Docker registry
                    //sh "docker tag ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                // Run your tests inside the Docker container
                sh 'docker run --rm my-flask-app python -m pytest app/tests/'
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for Quality Gate result..."
                    timeout(time: 15, unit: 'MINUTES') {  // Increased timeout
                        def qualityGate = waitForQualityGate()

                        if (qualityGate.status != 'OK') {
                            echo "Quality Gate Status: ${qualityGate.status}"
                            error "Quality Gate failed: ${qualityGate.status}"
                        } else {
                            echo "Quality Gate Status: ${qualityGate.status}"
                            echo "SonarQube Quality Gates Passed"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        // Log in to Docker registry
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin ${DOCKER_REGISTRY}"
                        
                        // Push the Docker image to the registry
                        sh "docker push ${DOCKER_NGINX_IMAG}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes with Helm') {
            steps {
                withCredentials([file(credentialsId: 'kubernetes-config-file', variable: 'KUBECONFIG')]) {
                    script {
                        // Initialize Helm (optional, if needed)
                        sh 'helm version'

                        // Deploy using Helm, passing the image repository and tag as variables
                        sh """
                            helm upgrade --install ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} \
                                --set image.repository=${DOCKER_NGINX_IMAG} \
                                --set image.tag=${IMAGE_TAG} \
                                --namespace ${KUBE_NAMESPACE} \
                                --create-namespace
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Logout from Docker registry
            sh 'docker logout'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}